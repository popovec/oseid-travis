http://pcsclite.alioth.debian.org/ifdhandler-3/node12.html
////////////////////////////////////////////////////////////////////////////////
IFDHCreateChannel

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHCreateChannel(DWORD Lun,
    DWORD Channel);
Parameters:

Lun	IN	Logical Unit Number
Channel	IN	Channel ID
Description:

This function is required to open a communications channel to the port
listed by Channel. For example, the first serial reader on COM1 would link
to /dev/pcsc/1 which would be a symbolic link to /dev/ttyS0 on some machines
This is used to help with inter-machine independence.

On machines with no /dev directory the driver writer may choose to map their
Channel to whatever they feel is appropriate.

Once the channel is opened the reader must be in a state in which it is
possible to query IFDHICCPresence() for card status.

Lun - Logical Unit Number
Use this for multiple card slots or multiple readers. 0xXXXXYYYY - XXXX
multiple readers, YYYY multiple slots. The resource manager will set these
automatically. By default the resource manager loads a new instance of the
driver so if your reader does not have more than one smart card slot then
ignore the Lun in all the functions.

PC/SC supports the loading of multiple readers through one instance of the
driver in which XXXX is important. XXXX identifies the unique reader in
which the driver communicates to. The driver should set up an array of
structures that associate this XXXX with the underlying details of the
particular reader.

Channel - Channel ID
This is denoted by the following:

0x000001	/dev/pcsc/1
0x000002	/dev/pcsc/2
0x000003	/dev/pcsc/3
0x000004	/dev/pcsc/4
USB readers can ignore the Channel parameter and query the USB bus for the
particular reader by manufacturer and product id.

Returns:

IFD_SUCCESS	Successful
IFD_COMMUNICATION_ERROR	Error has occurred
IFD_NO_SUCH_DEVICE	The reader is no more present


////////////////////////////////////////////////////////////////////////////////
IFDHCreateChannelByName

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHCreateChannelByName(DWORD Lun,
    LPSTR deviceName);
Parameters:

Lun	IN	Logical Unit Number
DeviceName	IN	String device path
Description:

This function is required to open a communications channel to the port
listed by DeviceName.

Once the channel is opened the reader must be in a state in which it is
possible to query IFDHICCPresence() for card status.

Lun - Logical Unit Number
Use this for multiple card slots or multiple readers. 0xXXXXYYYY - XXXX
multiple readers, YYYY multiple slots. The resource manager will set these
automatically. By default the resource manager loads a new instance of the
driver so if your reader does not have more than one smart card slot then
ignore the Lun in all the functions.

PC/SC supports the loading of multiple readers through one instance of the
driver in which XXXX is important. XXXX identifies the unique reader in
which the driver communicates to. The driver should set up an array of
structures that associate this XXXX with the underlying details of the
particular reader.

DeviceName - filename to use by the driver.
For drivers configured by /etc/reader.conf this is the value of the field
DEVICENAME.

For USB drivers the DeviceName must start with usb:VID/PID. VID is the
Vendor ID and PID is the Product ID. Both are a 4-digits hex number.

Typically the string is generated by:

printf("usb:%04x/%04x", idVendor, idProduct);
The DeviceName string may also contain a more specialised identification
string. This additional information is used to differentiate between two
identical readers connected at the same time. In this case the driver can't
differentiate the two readers using VID and PID and must use some additional
information identifying the USB port used by each readers.

libusb
For USB drivers using libusb3 for USB abstraction the DeviceName the string
may be generated by:

printf("usb:%04x/%04x:libusb:%s:%s",
    idVendor, idProduct,
    bus->dirname, dev->filename)
So it is something like: usb:08e6/3437:libusb:001:042 under GNU/Linux.

libhal
If pcscd is compiled with libhal support instead of libusb (default since
pcsc-lite 1.4.100) the string will look like:

printf("usb:%04x/%04x:libhal:%s",
    idVendor, idProduct, udi)
udi is the Universal Device Id at the HAL level.

So it is something like:
usb:08e6/3437:libhal:/org/freedesktop/Hal/devices/usb_device_8e6_3437_noserial_if0
under GNU/Linux.

other
If the driver does not understand the :libusb: or :libhal: scheme or if a
new scheme is used, the driver should ignore the part it does not understant
instead of failing.

The driver shall recognize the usb:VID/PID part and, only if possible, the
remaining of the DeviceName field.

It is the responsibility of the driver to correctly identify the reader.

Returns:

IFD_SUCCESS	Successful
IFD_COMMUNICATION_ERROR	Error has occurred
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////
IFDHCloseChannel

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHCloseChannel(DWORD Lun);
Parameters:

Lun	IN	Logical Unit Number
Description:

This function should close the reader communication channel for the
particular reader. Prior to closing the communication channel the reader
should make sure the card is powered down and the terminal is also powered
down.

Returns:

IFD_SUCCESS	Successful
IFD_COMMUNICATION_ERROR	Error has occurred
IFD_NO_SUCH_DEVICE	The reader is no more present


////////////////////////////////////////////////////////////////////////////////
IFDHGetCapabilities

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHGetCapabilities(DWORD Lun,
    DWORD Tag,
    PDWORD Length,
    PUCHAR Value);
Parameters:

Lun	IN	Logical Unit Number
Tag	IN	Tag of the desired data value
Length	INOUT	Length of the desired data value
Value	OUT	Value of the desired data
Description:

This function should get the slot/card capabilities for a particular
slot/card specified by Lun. Again, if you have only 1 card slot and don't
mind loading a new driver for each reader then ignore Lun.

Tag - the tag for the information requested
TAG_IFD_ATR
Return the ATR and it's size (implementation is mandatory).

SCARD_ATTR_ATR_STRING
Same as TAG_IFD_ATR but this one is not mandatory. It is defined in
Microsoft PC/SC SCardGetAttrib().

TAG_IFD_SIMULTANEOUS_ACCESS
Return the number of sessions (readers) the driver can handle in Value[0].

This is used for multiple readers sharing the same driver.

TAG_IFD_THREAD_SAFE
If the driver supports more than one reader (see TAG_IFD_SIMULTANEOUS_ACCESS
above) this tag indicates if the driver supports access to multiple readers
at the same time.

Value[0] = 1 indicates the driver supports simultaneous accesses.

TAG_IFD_SLOTS_NUMBER
Return the number of slots in this reader in Value[0].

TAG_IFD_SLOT_THREAD_SAFE
If the reader has more than one slot (see TAG_IFD_SLOTS_NUMBER above) this
tag indicates if the driver supports access to multiple slots of the same
reader at the same time.

Value[0] = 1 indicates the driver supports simultaneous slot accesses.

Length - the length of the returned data
Value - the value of the data
This function is also called when the application uses the PC/SC
SCardGetAttrib() function. The list of supported tags is not limited. The
ones above are used by the PC/SC lite resource manager.

Returns:

IFD_SUCCESS	Successful
IFD_ERROR_TAG	Invalid tag given
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////
IFDHSetCapabilities

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHSetCapabilities(DWORD Lun,
    DWORD Tag,
    DWORD Length,
    PUCHAR Value);
Parameters:

Lun	IN	Logical Unit Number
Tag	IN	Tag of the desired data value
Length	INOUT	Length of the desired data value
Value	OUT	Value of the desired data
Description:

This function should set the slot/card capabilities for a particular
slot/card specified by Lun. Again, if you have only 1 card slot and don't
mind loading a new driver for each reader then ignore Lun.

Tag - the tag for the information needing set
TAG_IFD_SLOTNUM
This is used in IFDHandler v1.0 to select the slot to use for the next IFD_*
command. This tag is no more used with versions 2.0 and 3.0 of the IFD
Handler.

Length - the length of the data
Value - the value of the data
This function is also called when the application uses the PC/SC
SCardGetAttrib() function. The list of supported tags is not limited.

Returns:

IFD_SUCCESS	Success
IFD_ERROR_TAG	Invalid tag given
IFD_ERROR_SET_FAILURE	Could not set value
IFD_ERROR_VALUE_READ_ONLY	Trying to set read only value
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////

IFDHSetProtocolParameters

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHSetProtocolParameters(DWORD Lun,
    DWORD Protocol,
    UCHAR Flags,
    UCHAR PTS1,
    UCHAR PTS2,
    UCHAR PTS3);
Parameters:

Lun	IN	Logical Unit Number
Protocol	IN	Desired protocol
Flags	IN	OR'd Flags (See below)
PTS1	IN	1st PTS Value
PTS2	IN	2nd PTS Value
PTS3	IN	3rd PTS Value
Description:

This function should set the Protocol Type Selection (PTS) of a particular
card/slot using the three PTS parameters sent

Protocol - SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
T=0 or T=1 protocol

Flags - Logical OR of possible values to determine which PTS values to
negotiate
IFD_NEGOTIATE_PTS1
IFD_NEGOTIATE_PTS2
IFD_NEGOTIATE_PTS3
PTS1, PTS2, PTS3 - PTS Values
See ISO 7816/EMV documentation.

Returns:

IFD_SUCCESS	Success
IFD_ERROR_PTS_FAILURE	Could not set PTS value
IFD_COMMUNICATION_ERROR	Error has occurred
IFD_PROTOCOL_NOT_SUPPORTED	Protocol is not supported
IFD_NOT_SUPPORTED	Action not supported
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////

IFDHPowerICC

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHPowerICC(DWORD Lun,
    DWORD Action,
    PUCHAR Atr,
    PDWORD AtrLength);
Parameters:

Lun	IN	Logical Unit Number
Action	IN	Action to be taken
Atr	OUT	Answer to Reset (ATR) value of the inserted card
AtrLength	INOUT	Length of the ATR
Description:

This function controls the power and reset signals of the smart card reader
at the particular reader/slot specified by Lun.

Action - Action to be taken on the card
IFD_POWER_UP
Power up the card (store and return Atr and AtrLength)

IFD_POWER_DOWN
Power down the card (Atr and AtrLength should be zeroed)

IFD_RESET
Perform a warm reset of the card (no power down). If the card is not powered
then power up the card (store and return Atr and AtrLength)

Atr - Answer to Reset (ATR) of the card
The driver is responsible for caching this value in case
IFDHGetCapabilities() is called requesting the ATR and its length. The ATR
length should not exceed MAX_ATR_SIZE.

AtrLength - Length of the ATR
This should not exceed MAX_ATR_SIZE.

Notes:

Memory cards without an ATR should return IFD_SUCCESS on reset but the Atr
should be zeroed and the length should be zero Reset errors should return
zero for the AtrLength and return IFD_ERROR_POWER_ACTION.

////////////////////////////////////////////////////////////////////////////////

IFDHTransmitToICC

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHTransmitToICC(DWORD Lun,
    SCARD_IO_HEADER SendPci,
    PUCHAR TxBuffer,
    DWORD TxLength,
    PUCHAR RxBuffer,
    PDWORD RxLength,
    PSCARD_IO_HEADER RecvPci);
Parameters:

Lun	IN	Logical Unit Number
SendPci	IN	Protocol structure
TxBuffer	IN	APDU to be sent
TxLength	IN	Length of sent APDU
RxBuffer	OUT	APDU response
RxLength	INOUT	Length of APDU response
RecvPci	INOUT	Receive protocol structure
Description:

This function performs an APDU exchange with the card/slot specified by Lun.
The driver is responsible for performing any protocol specific exchanges
such as T=0, 1, etc. differences. Calling this function will abstract all
protocol differences.

SendPci - contains two structure members
Protocol - 0, 1, ... 14
T=0 ... T=14

Length - Not used.
TxBuffer - Transmit APDU
Example: "\x00\xA4\x00\x00\x02\x3F\x00"

TxLength - Length of this buffer
RxBuffer - Receive APDU
Example: "\x61\x14"

RxLength - Length of the received APDU
This function will be passed the size of the buffer of RxBuffer and this
function is responsible for setting this to the length of the received APDU
response. This should be ZERO on all errors. The resource manager will take
responsibility of zeroing out any temporary APDU buffers for security
reasons.

RecvPci - contains two structure members
Protocol - 0, 1, ... 14
T=0 ... T=14

Length - Not used.
Notes:

The driver is responsible for knowing what type of card it has. If the
current slot/card contains a memory card then this command should ignore the
Protocol and use the MCT style commands for support for these style cards
and transmit them appropriately. If your reader does not support memory
cards or you don't want to implement this functionality, then ignore this.

RxLength should be set to zero on error.

The driver is not responsible for doing an automatic Get Response command
for received buffers containing 61 XX.

Returns:

IFD_SUCCESS	Success
IFD_COMMUNICATION_ERROR	An error has occurred
IFD_RESPONSE_TIMEOUT	The response timed out
IFD_ICC_NOT_PRESENT	ICC is not present
IFD_PROTOCOL_NOT_SUPPORTED	Protocol is not supported
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////

IFDHControl

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHControl(DWORD Lun,
    DWORD dwControlCode,
    PUCHAR TxBuffer,
    DWORD TxLength,
    PUCHAR RxBuffer,
    DWORD RxLength,
    PDWORD pdwBytesReturned);
Parameters:

Lun	IN	Logical Unit Number
dwControlCode	IN	Control code for the operation
TxBuffer	IN	Bytes to be sent
TxLength	IN	Length of sent bytes
RxBuffer	OUT	Response
RxLength	IN	Length of response buffer
pdwBytesReturned	OUT	Length of response
Description:

This function performs a data exchange with the reader (not the card)
specified by Lun. It is responsible for abstracting functionality such as
PIN pads, biometrics, LCD panels, etc. You should follow the MCT and CTBCS
specifications for a list of accepted commands to implement. This function
is fully voluntary and does not have to be implemented unless you want
extended functionality.

dwControlCode - Control code for the operation
This value identifies the specific operation to be performed. This value is
driver specific.

TxBuffer - Transmit data
TxLength - Length of this buffer
RxBuffer - Receive data
RxLength - Length of the response buffer
pdwBytesReturned - Length of response
This function will be passed the length of the buffer RxBuffer in RxLength
and it must set the length of the received data in pdwBytesReturned.

Notes:

*pdwBytesReturned should be set to zero on error.

Returns:

IFD_SUCCESS	Success
IFD_COMMUNICATION_ERROR	An error has occurred
IFD_RESPONSE_TIMEOUT	The response timed out
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////

IFDHICCPresence

Synopsis:

#include <PCSC/ifdhandler.h>

RESPONSECODE IFDHICCPresence(DWORD Lun);
Parameters:

Lun	IN	Logical Unit Number
Description:

This function returns the status of the card inserted in the reader/slot
specified by Lun. In cases where the device supports asynchronous card
insertion/removal detection, it is advised that the driver manages this
through a thread so the driver does not have to send and receive a command
each time this function is called.

Returns:

IFD_ICC_PRESENT	ICC is present
IFD_ICC_NOT_PRESENT	ICC is not present
IFD_COMMUNICATION_ERROR	An error has occurred
IFD_NO_SUCH_DEVICE	The reader is no more present

////////////////////////////////////////////////////////////////////////////////
